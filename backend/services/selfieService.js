const fs = require("fs");
const path = require("path");
const OpenAI = require("openai");

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Use OpenAI to analyze and enrich the image labels.
 * @param {Array<string>} labels - The labels generated by TensorFlow.
 * @returns {Promise<string>} - A detailed description from OpenAI.
 */
const analyzeLabelsWithOpenAI = async (labels) => {
  try {
    const prompt = `
      Based on the following labels extracted from an image, provide a detailed and artistic description of the scene:
      Labels: ${labels.join(", ")}
    `;

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 150,
    });

    return response.choices[0].message.content.trim();
  } catch (error) {
    console.error("Error generating description with OpenAI:", error);
    throw new Error("Failed to generate image description.");
  }
};

const saveImage = (imageBase64) => {
  const matches = imageBase64.match(/^data:image\/(png|jpeg);base64,(.+)$/);
  if (!matches) throw new Error("Invalid image format");

  const extension = matches[1];
  const data = matches[2];
  const buffer = Buffer.from(data, "base64");

  const dir = path.join(__dirname, "../uploads/selfies");
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }

  const filename = `${Date.now()}.${extension}`;
  const filePath = path.join(dir, filename);
  fs.writeFileSync(filePath, buffer);

  return filePath;
};

module.exports = { saveImage, analyzeLabelsWithOpenAI };
